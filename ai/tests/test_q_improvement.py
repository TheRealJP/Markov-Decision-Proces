import unittest
from numpy import argmax


class TestImprovementWithQ(unittest.TestCase):

    def setUp(self):
        # list of q values
        self.q = [[0.0007853623213104136, 0.0009860181149878963, 0.0011100436447507797, 0.00036393631498783663],
                  [4.299472709919485e-05, 0.0, 0.00012182682867543232, 0.00023330593299561051],
                  [0.0, 8.553973657399183e-06, 0.0003150254487991333, 8.095804986396615e-06],
                  [3.2588839530944824e-05, 0.0, 0.0, 0.0],
                  [0.003586353167926703, 0.0036995388513844005, 0.0014232466674002353, 0.0004894105229230462],
                  [0.00019399920866390499, 0.00032368081793724367, 0.0002260537939060411, 0.0],
                  [0.000926971435546875, 4.2385086357382706e-05, 0.0, 3.2588839530944824e-05],
                  [0.0, 0.0, 4.63193292610767e-05, 0.0],
                  [0.0027573275726040804, 0.007313176989555359, 0.004016876220703125, 0.0005051567790644887],
                  [0.0, 0.0, 0.0692138671875, 0.0015389174222946167],
                  [0.2548828125, 0.00494384765625, 0.2550240308046341, 0.0], [0.0, 0.0, 0.0, 0.0],
                  [0.00017380714416503906, 0.0004146642716459162, 0.0, 0.0],
                  [0.0, 0.0, 0.140625, 0.46197509765625], [0.36975257098674774, 0.0, 1.359375, 0.75],
                  [0.0, 0.0, 0.0, 8.058099774643779e-05]]

        self.decay = 0.9804160947014998

        self.policy = [[0.24510402367537495, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.24510644972774198, 0.26468065081677405],
                       [0.24510644972774198, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.26468065081677405, 0.24510644972774198, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.26468065081677405, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.26468065081677405, 0.24510644972774198, 0.24510644972774198],
                       [0.26468065081677405, 0.24510644972774198, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.24510644972774198, 0.26468065081677405, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.26468065081677405, 0.24510644972774198, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.26468065081677405, 0.24510644972774198, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.24510644972774198, 0.26468065081677405],
                       [0.24510644972774198, 0.24510644972774198, 0.26468065081677405, 0.24510644972774198],
                       [0.24510644972774198, 0.24510644972774198, 0.24510644972774198, 0.26468065081677405]]

        # mdp mock
        self.n_states = 15
        self.n_actions = 4

    def test_improve_policy_values(self):
        for s in range(self.n_states):
            a_star = argmax([self.q[s][a] for a in range(self.n_actions)])

            for a in range(self.n_actions):
                # store old policy p
                old_p_policy = self.policy[s][a]
                self.policy[s][a] = 1. * self.decay / self.n_actions

                if a_star == a:
                    self.policy[s][a] += 1 - self.decay
                    new_p_policy = self.policy[s][a]

                    # test improvement
                    self.assertFalse(old_p_policy is new_p_policy)


if __name__ == '__main__':
    unittest.main()