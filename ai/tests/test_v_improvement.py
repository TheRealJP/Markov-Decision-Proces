import unittest
from numpy import amax, argmax, exp
from ai.percept import Percept


class TestVImprovement(unittest.TestCase):

    # initialises variables needed in the test(s)
    def setUp(self):
        # mdp mock
        self.n_states = 16
        self.n_actions = 4
        self.discount = .25
        self.learning_rate = 0.75

        # list of chances for each sas'
        self.ptsa = [[0.6696141, 0., 0., 0., 0.3309236, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0.3172655, 0.3397548, 0., 0., 0.3438596, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0.357391, 0.3249128, 0., 0., 0.3188531, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0.6837606, 0.3165399, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0.342776, 0.331920, 0., 0., 0., 0.32911392, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3371710, 0., 0.3349753, 0., 0., 0.33003, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0.3141891, 0.3282828, 0., 0., 0.35919056, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3104524, 0.37, 0.3166144, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0., 0.3978494, 0.2669039, 0., 0., 0., 0.3417266, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0.3186813, 0., 0.3481481, 0., 0., 0.3382352, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0., 0.3215686, 0.3031496, 0., 0., 0.3813229, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0.4035874, 0.3022222, 0.3008849, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0., 0., 0.2677165, 0.4112903, 0., 0., 0., 0.3410852, 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0., 0.3934426, 0.2833333, 0., 0., 0., 0.3361344, 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0., 0., 0.7575757, 0., 0., 0., 0.2480620, 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0., 0.2887323, 0.7163120, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0.3343283, 0., 0., 0., 0.3233979, 0., 0., 0., 0.3448275, 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0., 0., 0., 0.32859, 0.3163752, 0., 0., 0.3575949, 0., 0., 0., 0., 0., 0., 0.],
                        [0.3323699, 0., 0., 0., 0., 0.34005764, 0., 0., 0.3304347, 0., 0., 0., 0., 0., 0., 0.],
                        [0.3135313, 0., 0., 0., 0.3609271, 0.32727273, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0.6435897, 0., 0., 0., 0.3591731, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3413333, 0.3513513, 0., 0., 0.3138297, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3284457, 0.3484419, 0., 0., 0.3352272, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.6096096, 0.3922155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0., 0., 0.3454545, 0., 0., 0.36111111, 0., 0., 0., 0., 0.3142857, 0., 0., 0., 0., 0.],
                        [0., 0., 0., 0., 0., 0.33333333, 0., 0.3698630, 0., 0., 0.3098591, 0., 0., 0., 0., 0.],
                        [0., 0., 0.3488372, 0., 0., 0., 0., 0.3209876, 0., 0., 0.3614457, 0., 0., 0., 0., 0.],
                        [0., 0., 0.2597402, 0., 0., 0.42, 0., 0.3333333, 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0.7358490, 0., 0., 0., 0.274509, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3061224, 0.3617021, 0., 0., 0.3725490, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.404761, 0.3589743, 0., 0., 0.2682926, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.6, 0.3673469, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0., 0., 0., 0., 0.3708920, 0., 0., 0., 0.3211009, 0., 0., 0., 0.3196347, 0., 0., 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0.3443983, 0.2970711, 0., 0., 0.36554622, 0., 0., 0.],
                        [0., 0., 0., 0., 0.3617021, 0., 0., 0., 0., 0.3537117, 0., 0., 0.30543933, 0., 0., 0.],
                        [0., 0., 0., 0., 0.3741935, 0., 0., 0., 0.2880258, 0.344262, 0., 0., 0., 0., 0., 0.]], [
                        [0., 0., 0., 0., 0., 0.29411765, 0., 0., 0.3670886, 0., 0., 0., 0., 0.3720930, 0., 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0.3243243, 0., 0.3773584, 0., 0., 0.3214285, 0., 0.],
                        [0., 0., 0., 0., 0., 0.29687, 0., 0., 0., 0., 0., 0., 0., 0.2222222, 0., 0.],
                        [0., 0., 0., 0., 0., 0.43421053, 0., 0., 0.22, 0., 0.3717948, 0., 0., 0., 0., 0.]], [
                        [0., 0., 0., 0., 0., 0., 0.453125, 0., 0., 0.223880, 0., 0., 0., 0., 0.3538461, 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.4423076, 0., 0.2931034, 0., 0., 0.3214285, 0.],
                        [0., 0., 0., 0., 0., 0., 0.3773584, 0., 0., 0., 0., 0.33333333, 0., 0., 0.3448275, 0.],
                        [0., 0., 0., 0., 0., 0., 0.4102564, 0., 0., 0., 0., 0.34285714, 0., 0., 0., 0.]], [
                        [0., 0., 0., 0., 0.5555555, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.6666666, 0.2142857, 0., 0., 0.3846153, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.5454545, 0.2307692, 0., 0., 0.3333333, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.8888888, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0.6842105, 0., 0., 0., 0.3, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.4126984, 0.3035714, 0., 0., 0.3333333, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.3174603, 0.3437, 0., 0., 0.3538461, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.5820895, 0.451612, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], [
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.1212121, 0., 0., 0.51351351, 0.3888888, 0., 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.35555556, 0.3863636, 0.312, 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.4358974, 0.1951219, 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5172413, 0., 0., 0.2, 0., 0., 0.]], [
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.2272727, 0.3478260, 0.],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.4210526, 0.2941176, 0.32432432],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.3103448, 0., 0., 0., 0.4193548, 0.34615385],
                        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5937, 0., 0., 0.1724137, 0., 0.30769231]], [
                        [0., 0., 0., 0., 0.4285714, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.37, 0., 0., 0., 0.7142857, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0.6666666, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                        [0., 0.4444444, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]
        # list of rewards
        self.r = [[0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.],
                  [0., 0., 0., 0.]]

        # optimal policy
        self.policy = [[0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.21444156121133007, 0.21444156121133007, 0.3566753163660098],
                       [0.21444156121133007, 0.3566753163660098, 0.21444156121133007, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.3566753163660098, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.3566753163660098, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.21444156121133007, 0.3566753163660098, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.21444156121133007, 0.3566753163660098, 0.21444156121133007],
                       [0.3566753163660098, 0.21444156121133007, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.3566753163660098, 0.21444156121133007, 0.21444156121133007],
                       [0.21444156121133007, 0.21444156121133007, 0.3566753163660098, 0.21444156121133007],
                       [0.21444156121133007, 0.21444156121133007, 0.21444156121133007, 0.3566753163660098]]

        # list of v values
        self.v = [2.0999060490543973, 2.0859619943463139, 2.0730905979311998, 1.9734171153029445, 2.1088134635498141,
                  2.0927354166823333, 2.0774642436099793, 1.9413265477932546, 2.1296075325236172, 2.2938437894547472,
                  2.627063757180768, 1.1873590850727209, 2.059262287914994, 2.6823847364403104, 3.4113010471160528,
                  1.139701440111208]

        # decay for improvement
        self.decay = 1.
        self.decay_min = .01
        self.decay_max = 1.
        self.decay_rate = 0.1E-4
        self.t = 5

    def test_improve_with_v(self):
        s = 5
        a = 2
        a_star = argmax(
            [sum([self.ptsa[s][a][s_] * (self.r[s][a] + self.discount * self.v[s_])
                  for s_ in range(self.n_states)]) for a in range(self.n_actions)])

        old_sa_policy = self.policy[s][a]
        self.policy[s][a] = 1. * self.decay / self.n_actions
        if a_star == a:
            self.policy[s][a] += 1 - self.decay
        new_sa_policy = self.policy[s][a]

        # improve policy
        old_decay = self.decay
        self.decay = self.decay_min + (self.decay_max - self.decay_min) * exp(-self.decay_rate * self.t)
        self.t += 1
        new_decay = self.decay

        # some logs
        print 'a* & a ==', a_star
        print 'policy value before improvement:', old_sa_policy, '| after improvement:', new_sa_policy
        print 'decay:', old_decay, '| updated decay:', new_decay

        # actual tests

        self.assertIsNotNone((new_sa_policy, old_sa_policy, old_decay, new_decay))
        self.assertFalse(new_sa_policy is old_sa_policy)
        self.assertFalse(new_decay is old_decay)


if __name__ == '__main__':
    unittest.main()
